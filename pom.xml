<!--
  Copyright (c) 2006 LibJ

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  You should have received a copy of The MIT License (MIT) along with this
  program. If not, see <http://opensource.org/licenses/MIT/>.
-->
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.libj</groupId>
    <artifactId>libj</artifactId>
    <version>0.9.7-SNAPSHOT</version>
  </parent>
  <artifactId>util</artifactId>
  <version>0.8.1-SNAPSHOT</version>
  <name>LibJ Util</name>
  <description>
    Supplementary utilities for classes that belong to java.util, or are considered essential as to justify existence in java.util.
  </description>
  <build>
    <plugins>
      <plugin>
        <groupId>org.openjax.codegen</groupId>
        <artifactId>codegen-maven-plugin</artifactId>
        <version>0.2.5-SNAPSHOT</version>
        <executions>
          <execution>
            <id>generate-sources</id>
            <goals>
              <goal>template</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <templates>
                <template>src/main/resources/&lt;S&gt;Collection.java</template>
                <template>src/main/resources/&lt;S&gt;Comparator.java</template>
                <template>src/main/resources/&lt;S&gt;Iterable.java</template>
                <template>src/main/resources/&lt;S&gt;Iterator.java</template>
                <template>src/main/resources/&lt;S&gt;List.java</template>
                <template>src/main/resources/&lt;S&gt;ListIterator.java</template>
                <template>src/main/resources/&lt;S&gt;Set.java</template>
                <template>src/main/resources/Array&lt;S&gt;List.java</template>
                <template>src/main/resources/Hash&lt;S&gt;Set.java</template>
              </templates>
              <destDir>${project.build.directory}/generated-sources/codegen/org/libj/util/primitive</destDir>
            </configuration>
          </execution>
          <execution>
            <id>generate-test-sources</id>
            <goals>
              <goal>template</goal>
            </goals>
            <phase>generate-test-sources</phase>
            <configuration>
              <templates>
                <template>src/test/resources/Array&lt;S&gt;ListTest.java</template>
                <template>src/test/resources/Hash&lt;S&gt;SetTest.java</template>
              </templates>
              <destDir>${project.build.directory}/generated-test-sources/codegen/org/libj/util/primitive</destDir>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <parameters>
            <byte>
              <types>
                <S>Byte</S>
                <T>Byte</T>
                <t>byte</t>
                <_>//</_>
              </types>
              <imports>
                <import>org.libj.util.function.ByteConsumer</import>
                <import>org.libj.util.function.BytePredicate</import>
                <import>org.libj.util.function.ByteUnaryOperator</import>
              </imports>
            </byte>
            <char>
              <types>
                <S>Char</S>
                <T>Character</T>
                <t>char</t>
                <_>//</_>
              </types>
              <imports>
                <import>org.libj.util.function.CharConsumer</import>
                <import>org.libj.util.function.CharPredicate</import>
                <import>org.libj.util.function.CharUnaryOperator</import>
              </imports>
            </char>
            <short>
              <types>
                <S>Short</S>
                <T>Short</T>
                <t>short</t>
                <_>//</_>
              </types>
              <imports>
                <import>org.libj.util.function.ShortConsumer</import>
                <import>org.libj.util.function.ShortPredicate</import>
                <import>org.libj.util.function.ShortUnaryOperator</import>
              </imports>
            </short>
            <int>
              <types>
                <S>Int</S>
                <T>Integer</T>
                <t>int</t>
                <_></_>
              </types>
              <imports>
                <import>java.util.function.IntConsumer</import>
                <import>java.util.function.IntPredicate</import>
                <import>java.util.function.IntUnaryOperator</import>
                <import>java.util.Spliterator</import>
                <import>java.util.stream.IntStream</import>
                <import>java.util.stream.StreamSupport</import>
              </imports>
            </int>
            <long>
              <types>
                <S>Long</S>
                <T>Long</T>
                <t>long</t>
                <_></_>
              </types>
              <imports>
                <import>java.util.function.LongConsumer</import>
                <import>java.util.function.LongPredicate</import>
                <import>java.util.function.LongUnaryOperator</import>
                <import>java.util.Spliterator</import>
                <import>java.util.stream.LongStream</import>
                <import>java.util.stream.StreamSupport</import>
              </imports>
            </long>
            <float>
              <types>
                <S>Float</S>
                <T>Float</T>
                <t>float</t>
                <_>//</_>
              </types>
              <imports>
                <import>org.libj.util.function.FloatConsumer</import>
                <import>org.libj.util.function.FloatPredicate</import>
                <import>org.libj.util.function.FloatUnaryOperator</import>
              </imports>
            </float>
            <double>
              <types>
                <S>Double</S>
                <T>Double</T>
                <t>double</t>
                <_></_>
              </types>
              <imports>
                <import>java.util.function.DoubleConsumer</import>
                <import>java.util.function.DoublePredicate</import>
                <import>java.util.function.DoubleUnaryOperator</import>
                <import>java.util.Spliterator</import>
                <import>java.util.stream.DoubleStream</import>
                <import>java.util.stream.StreamSupport</import>
              </imports>
            </double>
          </parameters>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>diff_match_patch</groupId>
      <artifactId>diff_match_patch</artifactId>
      <version>current</version>
    </dependency>
    <dependency>
      <groupId>org.libj</groupId>
      <artifactId>lang</artifactId>
      <version>0.7.5-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.libj</groupId>
      <artifactId>test</artifactId>
      <version>0.7.1-SNAPSHOT</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.libj</groupId>
      <artifactId>logging</artifactId>
      <version>0.4.5-SNAPSHOT</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <repositories>
    <repository>
      <id>redhat</id>
      <name>Redhat GA Repository</name>
      <url>https://maven.repository.redhat.com/ga/</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>
</project>